// <auto-generated />
using System;
using MTGDeckBuilder.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MTGDeckBuilder.EF.Migrations
{
    [DbContext(typeof(MTGDeckBuilderContext))]
    [Migration("20230205184655_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.8");

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.AvailabilityData", b =>
                {
                    b.Property<int?>("pkAvailability")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AvailabilityDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkAvailability");

                    b.ToTable("tblAvailability", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.BoosterTypeData", b =>
                {
                    b.Property<int?>("pkBoosterType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BoosterTypeDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkBoosterType");

                    b.ToTable("tblBoosterType", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.BorderColorData", b =>
                {
                    b.Property<int?>("pkBorderColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BorderColorDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkBorderColor");

                    b.ToTable("tblBorderColor", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.CardTypeData", b =>
                {
                    b.Property<int?>("pkCardType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CardTypeDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkCardType");

                    b.ToTable("tblCardType", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.ColorData", b =>
                {
                    b.Property<int?>("pkColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkColor");

                    b.ToTable("tblColor", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.ColorIdentityData", b =>
                {
                    b.Property<int?>("pkColorIdentity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorIdentityDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkColorIdentity");

                    b.ToTable("tblColorIdentity", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.ColorIndicatorData", b =>
                {
                    b.Property<int?>("pkColorIndicator")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorIndicatorDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkColorIndicator");

                    b.ToTable("tblColorIndicator", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.DeckTypeData", b =>
                {
                    b.Property<int?>("pkDeckType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeckTypeDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkDeckType");

                    b.ToTable("tblDeckType", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.DuelDeckData", b =>
                {
                    b.Property<int?>("pkDuelDeck")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DuelDeckDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkDuelDeck");

                    b.ToTable("tblDuelDeck", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.FinishData", b =>
                {
                    b.Property<int?>("pkFinish")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FinishDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkFinish");

                    b.ToTable("tblFinish", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.ForeignDataLanguageData", b =>
                {
                    b.Property<int?>("pkForeignDataLanguage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ForeignDataLanguageDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkForeignDataLanguage");

                    b.ToTable("tblForeignDataLanguage", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.FrameEffectData", b =>
                {
                    b.Property<int?>("pkFrameEffect")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FrameEffectDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkFrameEffect");

                    b.ToTable("tblFrameEffect", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.FrameVersionData", b =>
                {
                    b.Property<int?>("pkFrameVersion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FrameVersionDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkFrameVersion");

                    b.ToTable("tblFrameVersion", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.KeywordData", b =>
                {
                    b.Property<int?>("pkKeyword")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("KeywordDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("fkKeywordType")
                        .HasColumnType("INTEGER");

                    b.HasKey("pkKeyword");

                    b.HasIndex("fkKeywordType");

                    b.ToTable("tblKeyword", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.KeywordTypeData", b =>
                {
                    b.Property<int?>("pkKeywordType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("KeywordTypeDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkKeywordType");

                    b.ToTable("tblKeywordType", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.LanguageData", b =>
                {
                    b.Property<int?>("pkLanguage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LanguageDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkLanguage");

                    b.ToTable("tblLanguage", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.LayoutData", b =>
                {
                    b.Property<int?>("pkLayout")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LayoutDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkLayout");

                    b.ToTable("tblLayout", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.MetaData", b =>
                {
                    b.Property<int?>("pkMeta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateApplied")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("MetaDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkMeta");

                    b.ToTable("tblMeta", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.PromoTypeData", b =>
                {
                    b.Property<int?>("pkPromoType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PromoTypeDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkPromoType");

                    b.ToTable("tblPromoType", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.RarityData", b =>
                {
                    b.Property<int?>("pkRarity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("RarityDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkRarity");

                    b.ToTable("tblRarity", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SecurityStampData", b =>
                {
                    b.Property<int?>("pkSecurityStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStampDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkSecurityStamp");

                    b.ToTable("tblSecurityStamp", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SetCardAvailabilityData", b =>
                {
                    b.Property<int>("fkAvailability")
                        .HasColumnType("INTEGER");

                    b.Property<int>("fkSetCard")
                        .HasColumnType("INTEGER");

                    b.HasKey("fkAvailability", "fkSetCard");

                    b.HasIndex("fkSetCard");

                    b.ToTable("tblSetCardAvailability", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SetCardBoosterTypeData", b =>
                {
                    b.Property<int>("fkBoosterType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("fkSetCard")
                        .HasColumnType("INTEGER");

                    b.HasKey("fkBoosterType", "fkSetCard");

                    b.HasIndex("fkSetCard");

                    b.ToTable("tblSetCardBoosterType", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SetCardCardTypeData", b =>
                {
                    b.Property<int>("fkCardType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("fkSetCard")
                        .HasColumnType("INTEGER");

                    b.HasKey("fkCardType", "fkSetCard");

                    b.HasIndex("fkSetCard");

                    b.ToTable("tblSetCardType", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SetCardColorData", b =>
                {
                    b.Property<int>("fkColor")
                        .HasColumnType("INTEGER");

                    b.Property<int>("fkSetCard")
                        .HasColumnType("INTEGER");

                    b.HasKey("fkColor", "fkSetCard");

                    b.HasIndex("fkSetCard");

                    b.ToTable("tblSetCardColor", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SetCardColorIdentityData", b =>
                {
                    b.Property<int>("fkColorIdentity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("fkSetCard")
                        .HasColumnType("INTEGER");

                    b.HasKey("fkColorIdentity", "fkSetCard");

                    b.HasIndex("fkSetCard");

                    b.ToTable("tblSetCardColorIdentity", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SetCardData", b =>
                {
                    b.Property<int?>("pkSetCard")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Artist")
                        .HasColumnType("TEXT");

                    b.Property<string>("BorderColor")
                        .HasColumnType("TEXT");

                    b.Property<string>("CardKingdomId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CardsphereId")
                        .HasColumnType("TEXT");

                    b.Property<double?>("ConvertedManaCost")
                        .HasColumnType("REAL");

                    b.Property<int?>("EdhrecRank")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FrameVersion")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("HasFoil")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("HasNonFoil")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsCommanderFormatLegal")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsDuelFormatLegal")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsLegacyFormatLegal")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsOldschoolFormatLegal")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsPennyFormatLegal")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsPremodernFormatLegal")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsReprint")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsVintageFormatLegal")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT");

                    b.Property<string>("Layout")
                        .HasColumnType("TEXT");

                    b.Property<string>("ManaCost")
                        .HasColumnType("TEXT");

                    b.Property<double?>("ManaValue")
                        .HasColumnType("REAL");

                    b.Property<string>("McmId")
                        .HasColumnType("TEXT");

                    b.Property<string>("MtgjsonV4Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("MultiverseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginalText")
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginalType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Rarity")
                        .HasColumnType("TEXT");

                    b.Property<string>("ScryfallId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ScryfallIllustrationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ScryfallOracleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SetCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("TcgplayerProductId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<string>("UUID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("fkSet")
                        .HasColumnType("INTEGER");

                    b.HasKey("pkSetCard");

                    b.HasAlternateKey("UUID");

                    b.HasIndex("fkSet");

                    b.ToTable("tblSetCard", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SetCardFinishData", b =>
                {
                    b.Property<int>("fkFinish")
                        .HasColumnType("INTEGER");

                    b.Property<int>("fkSetCard")
                        .HasColumnType("INTEGER");

                    b.HasKey("fkFinish", "fkSetCard");

                    b.HasIndex("fkSetCard");

                    b.ToTable("tblSetCardFinish", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SetCardForeignDataData", b =>
                {
                    b.Property<int?>("pkSetCardForeignData")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FaceName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FlavorText")
                        .HasColumnType("TEXT");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT");

                    b.Property<string>("MultiverseID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<int?>("fkSetCard")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.HasKey("pkSetCardForeignData");

                    b.HasIndex("fkSetCard");

                    b.ToTable("tblSetCardForeignData", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SetCardKeywordData", b =>
                {
                    b.Property<int>("fkKeyword")
                        .HasColumnType("INTEGER");

                    b.Property<int>("fkSetCard")
                        .HasColumnType("INTEGER");

                    b.HasKey("fkKeyword", "fkSetCard");

                    b.HasIndex("fkSetCard");

                    b.ToTable("tblSetCardKeyword", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SetCardPrintingData", b =>
                {
                    b.Property<int?>("pkSetCardPrinting")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PrintingSetCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("fkSetCard")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.HasKey("pkSetCardPrinting");

                    b.HasIndex("fkSetCard");

                    b.ToTable("tblSetCardPrinting", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SetCardRulingData", b =>
                {
                    b.Property<int>("pkSetCardRuling")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("RulingDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("RulingText")
                        .HasColumnType("TEXT");

                    b.Property<int?>("fkSetCard")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.HasKey("pkSetCardRuling");

                    b.HasIndex("fkSetCard");

                    b.ToTable("tblSetCardRuling", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SetCardSubtypeData", b =>
                {
                    b.Property<int>("fkSubtype")
                        .HasColumnType("INTEGER");

                    b.Property<int>("fkSetCard")
                        .HasColumnType("INTEGER");

                    b.HasKey("fkSubtype", "fkSetCard");

                    b.HasIndex("fkSetCard");

                    b.ToTable("tblSetCardSubtype", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SetCardSupertypeData", b =>
                {
                    b.Property<int>("fkSupertype")
                        .HasColumnType("INTEGER");

                    b.Property<int>("fkSetCard")
                        .HasColumnType("INTEGER");

                    b.HasKey("fkSupertype", "fkSetCard");

                    b.HasIndex("fkSetCard");

                    b.ToTable("tblSetCardSupertype", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SetData", b =>
                {
                    b.Property<int?>("pkSet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BaseSetSize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Block")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CardsphereSetId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsFoilOnly")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsNonFoilOnly")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsOnlineOnly")
                        .HasColumnType("INTEGER");

                    b.Property<string>("KeyruneCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TcgplayerGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TotalSetSize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("pkSet");

                    b.HasAlternateKey("Code");

                    b.ToTable("tblSet", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SetLanguageData", b =>
                {
                    b.Property<int>("fkLanguage")
                        .HasColumnType("INTEGER");

                    b.Property<int>("fkSet")
                        .HasColumnType("INTEGER");

                    b.HasKey("fkLanguage", "fkSet");

                    b.HasIndex("fkSet");

                    b.ToTable("tblSetLanguage", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SetTypeData", b =>
                {
                    b.Property<int?>("pkSetType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SetTypeDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkSetType");

                    b.ToTable("tblSetType", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SideData", b =>
                {
                    b.Property<int?>("pkSide")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SideDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkSide");

                    b.ToTable("tblSide", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SubtypeData", b =>
                {
                    b.Property<int?>("pkSubtype")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SubtypeDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkSubtype");

                    b.ToTable("tblSubtype", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SupertypeData", b =>
                {
                    b.Property<int?>("pkSupertype")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SupertypeDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkSupertype");

                    b.ToTable("tblSupertype", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.TcgPlayerSkuConditionData", b =>
                {
                    b.Property<int?>("pkTcgPlayerSkuCondition")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConditionDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkTcgPlayerSkuCondition");

                    b.ToTable("tblTcgPlayerSkuCondition", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.TcgPlayerSkuFinishData", b =>
                {
                    b.Property<int?>("pkTcgPlayerSkuFinish")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FinishDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkTcgPlayerSkuFinish");

                    b.ToTable("tblTcgPlayerSkuFinish", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.TcgPlayerSkuLanguageData", b =>
                {
                    b.Property<int?>("pkTcgPlayerSkuLanguage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LanguageDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkTcgPlayerSkuLanguage");

                    b.ToTable("tblTcgPlayerSkuLanguage", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.TcgPlayerSkuPrintingData", b =>
                {
                    b.Property<int?>("pkTcgPlayerSkuPrinting")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PrintingDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkTcgPlayerSkuPrinting");

                    b.ToTable("tblTcgPlayerSkuPrinting", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.WatermarkData", b =>
                {
                    b.Property<int?>("pkWatermark")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("WatermarkDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkWatermark");

                    b.ToTable("tblWatermark", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.KeywordData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.Entities.KeywordTypeData", "KeywordType")
                        .WithMany()
                        .HasForeignKey("fkKeywordType");

                    b.Navigation("KeywordType");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SetCardAvailabilityData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.Entities.AvailabilityData", "AvailabilityData")
                        .WithMany()
                        .HasForeignKey("fkAvailability")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGDeckBuilder.EF.Entities.SetCardData", "SetCard")
                        .WithMany("SetCardAvailabilities")
                        .HasForeignKey("fkSetCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilityData");

                    b.Navigation("SetCard");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SetCardBoosterTypeData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.Entities.BoosterTypeData", "BoosterType")
                        .WithMany()
                        .HasForeignKey("fkBoosterType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGDeckBuilder.EF.Entities.SetCardData", "SetCard")
                        .WithMany("SetCardBoosterTypes")
                        .HasForeignKey("fkSetCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoosterType");

                    b.Navigation("SetCard");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SetCardCardTypeData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.Entities.CardTypeData", "CardType")
                        .WithMany()
                        .HasForeignKey("fkCardType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGDeckBuilder.EF.Entities.SetCardData", "SetCard")
                        .WithMany("SetCardTypes")
                        .HasForeignKey("fkSetCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardType");

                    b.Navigation("SetCard");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SetCardColorData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.Entities.ColorData", "Color")
                        .WithMany()
                        .HasForeignKey("fkColor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGDeckBuilder.EF.Entities.SetCardData", "SetCard")
                        .WithMany("SetCardColors")
                        .HasForeignKey("fkSetCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("SetCard");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SetCardColorIdentityData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.Entities.ColorIdentityData", "ColorIdentity")
                        .WithMany()
                        .HasForeignKey("fkColorIdentity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGDeckBuilder.EF.Entities.SetCardData", "SetCard")
                        .WithMany("SetCardColorIdentities")
                        .HasForeignKey("fkSetCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ColorIdentity");

                    b.Navigation("SetCard");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SetCardData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.Entities.SetData", "Set")
                        .WithMany("SetCards")
                        .HasForeignKey("fkSet");

                    b.Navigation("Set");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SetCardFinishData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.Entities.FinishData", "Finish")
                        .WithMany()
                        .HasForeignKey("fkFinish")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGDeckBuilder.EF.Entities.SetCardData", "SetCard")
                        .WithMany("SetCardFinishes")
                        .HasForeignKey("fkSetCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Finish");

                    b.Navigation("SetCard");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SetCardForeignDataData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.Entities.SetCardData", "SetCard")
                        .WithMany("ForeignData")
                        .HasForeignKey("fkSetCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SetCard");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SetCardKeywordData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.Entities.KeywordData", "Keyword")
                        .WithMany()
                        .HasForeignKey("fkKeyword")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGDeckBuilder.EF.Entities.SetCardData", "SetCard")
                        .WithMany("SetCardKeywords")
                        .HasForeignKey("fkSetCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Keyword");

                    b.Navigation("SetCard");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SetCardPrintingData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.Entities.SetCardData", "SetCard")
                        .WithMany("Printings")
                        .HasForeignKey("fkSetCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SetCard");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SetCardRulingData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.Entities.SetCardData", "SetCard")
                        .WithMany("Rulings")
                        .HasForeignKey("fkSetCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SetCard");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SetCardSubtypeData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.Entities.SetCardData", "SetCard")
                        .WithMany("SetCardSubtypes")
                        .HasForeignKey("fkSetCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGDeckBuilder.EF.Entities.SubtypeData", "Subtype")
                        .WithMany()
                        .HasForeignKey("fkSubtype")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SetCard");

                    b.Navigation("Subtype");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SetCardSupertypeData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.Entities.SetCardData", "SetCard")
                        .WithMany("SetCardSupertypes")
                        .HasForeignKey("fkSetCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGDeckBuilder.EF.Entities.SupertypeData", "Supertype")
                        .WithMany()
                        .HasForeignKey("fkSupertype")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SetCard");

                    b.Navigation("Supertype");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SetLanguageData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.Entities.LanguageData", "Language")
                        .WithMany()
                        .HasForeignKey("fkLanguage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGDeckBuilder.EF.Entities.SetData", "Set")
                        .WithMany("SetLanguages")
                        .HasForeignKey("fkSet")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Set");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SetCardData", b =>
                {
                    b.Navigation("ForeignData");

                    b.Navigation("Printings");

                    b.Navigation("Rulings");

                    b.Navigation("SetCardAvailabilities");

                    b.Navigation("SetCardBoosterTypes");

                    b.Navigation("SetCardColorIdentities");

                    b.Navigation("SetCardColors");

                    b.Navigation("SetCardFinishes");

                    b.Navigation("SetCardKeywords");

                    b.Navigation("SetCardSubtypes");

                    b.Navigation("SetCardSupertypes");

                    b.Navigation("SetCardTypes");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SetData", b =>
                {
                    b.Navigation("SetCards");

                    b.Navigation("SetLanguages");
                });
#pragma warning restore 612, 618
        }
    }
}
