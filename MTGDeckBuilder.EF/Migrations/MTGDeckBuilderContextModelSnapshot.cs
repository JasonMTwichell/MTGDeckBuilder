// <auto-generated />
using System;
using MTGDeckBuilder.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MTGDeckBuilder.EF.Migrations
{
    [DbContext(typeof(MTGDeckBuilderContext))]
    partial class MTGDeckBuilderContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("MTG")
                .HasAnnotation("ProductVersion", "6.0.8");

            modelBuilder.Entity("MTGDeckBuilder.EF.CardColorData", b =>
                {
                    b.Property<int>("fkCard")
                        .HasColumnType("INTEGER");

                    b.Property<int>("fkColor")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardspkCard")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ColorspkColor")
                        .HasColumnType("INTEGER");

                    b.HasKey("fkCard", "fkColor");

                    b.HasIndex("CardspkCard");

                    b.HasIndex("ColorspkColor");

                    b.ToTable("tblCardColor", "MTG");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.CardColorIdentityData", b =>
                {
                    b.Property<int>("fkCard")
                        .HasColumnType("INTEGER");

                    b.Property<int>("fkColor")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardIdentitiespkCard")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ColorIdentitiespkColor")
                        .HasColumnType("INTEGER");

                    b.HasKey("fkCard", "fkColor");

                    b.HasIndex("CardIdentitiespkCard");

                    b.HasIndex("ColorIdentitiespkColor");

                    b.ToTable("tblCardColorIdentity", "MTG");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.CardData", b =>
                {
                    b.Property<int>("pkCard")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AsciiName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("HandModifier")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasAlternateDeckLimit")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFunny")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsReserved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Layout")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("LifeModifier")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Loyalty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ManaCost")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ManaValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Power")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Side")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Toughness")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkCard");

                    b.ToTable("tblCard", "MTG");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.CardKeywordData", b =>
                {
                    b.Property<int>("fkCard")
                        .HasColumnType("INTEGER");

                    b.Property<int>("fkKeyword")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardspkCard")
                        .HasColumnType("INTEGER");

                    b.Property<int>("KeywordspkKeyword")
                        .HasColumnType("INTEGER");

                    b.HasKey("fkCard", "fkKeyword");

                    b.HasIndex("CardspkCard");

                    b.HasIndex("KeywordspkKeyword");

                    b.ToTable("tblCardKeywordData", "MTG");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.CardSubTypeData", b =>
                {
                    b.Property<int>("fkCard")
                        .HasColumnType("INTEGER");

                    b.Property<int>("fkSubType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardspkCard")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubTypespkSubType")
                        .HasColumnType("INTEGER");

                    b.HasKey("fkCard", "fkSubType");

                    b.HasIndex("CardspkCard");

                    b.HasIndex("SubTypespkSubType");

                    b.ToTable("tblCardSubType", "MTG");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.CardSuperTypeData", b =>
                {
                    b.Property<int>("fkCard")
                        .HasColumnType("INTEGER");

                    b.Property<int>("fkSuperType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardspkCard")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SuperTypespkSuperType")
                        .HasColumnType("INTEGER");

                    b.HasKey("fkCard", "fkSuperType");

                    b.HasIndex("CardspkCard");

                    b.HasIndex("SuperTypespkSuperType");

                    b.ToTable("tblCardSuperType", "MTG");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.CardTypeData", b =>
                {
                    b.Property<int>("fkCard")
                        .HasColumnType("INTEGER");

                    b.Property<int>("fkType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardspkCard")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TypespkType")
                        .HasColumnType("INTEGER");

                    b.HasKey("fkCard", "fkType");

                    b.HasIndex("CardspkCard");

                    b.HasIndex("TypespkType");

                    b.ToTable("tblCardType", "MTG");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.ColorData", b =>
                {
                    b.Property<int>("pkColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkColor");

                    b.ToTable("tblColor", "MTG");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.KeywordData", b =>
                {
                    b.Property<int>("pkKeyword")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Keyword")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkKeyword");

                    b.ToTable("tblKeyword", "MTG");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.LegalityData", b =>
                {
                    b.Property<int>("pkLegality")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("fkCard")
                        .HasColumnType("INTEGER");

                    b.HasKey("pkLegality");

                    b.HasIndex("fkCard");

                    b.ToTable("tblLegality", "MTG");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.PurchaseInformationData", b =>
                {
                    b.Property<int>("pkPurchaseInformation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CardURI")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StorefrontName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("fkCard")
                        .HasColumnType("INTEGER");

                    b.HasKey("pkPurchaseInformation");

                    b.HasIndex("fkCard");

                    b.ToTable("tblPurchaseInformation", "MTG");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.SubTypeData", b =>
                {
                    b.Property<int>("pkSubType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SubTypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkSubType");

                    b.ToTable("tblSubType", "MTG");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.SuperTypeData", b =>
                {
                    b.Property<int>("pkSuperType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SuperTypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkSuperType");

                    b.ToTable("tblSuperType", "MTG");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.TypeData", b =>
                {
                    b.Property<int>("pkType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkType");

                    b.ToTable("tblType", "MTG");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.CardColorData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.CardData", null)
                        .WithMany()
                        .HasForeignKey("CardspkCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGDeckBuilder.EF.ColorData", null)
                        .WithMany()
                        .HasForeignKey("ColorspkColor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.CardColorIdentityData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.CardData", null)
                        .WithMany()
                        .HasForeignKey("CardIdentitiespkCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGDeckBuilder.EF.ColorData", null)
                        .WithMany()
                        .HasForeignKey("ColorIdentitiespkColor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.CardKeywordData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.CardData", null)
                        .WithMany()
                        .HasForeignKey("CardspkCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGDeckBuilder.EF.KeywordData", null)
                        .WithMany()
                        .HasForeignKey("KeywordspkKeyword")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.CardSubTypeData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.CardData", null)
                        .WithMany()
                        .HasForeignKey("CardspkCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGDeckBuilder.EF.SubTypeData", null)
                        .WithMany()
                        .HasForeignKey("SubTypespkSubType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.CardSuperTypeData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.CardData", null)
                        .WithMany()
                        .HasForeignKey("CardspkCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGDeckBuilder.EF.SuperTypeData", null)
                        .WithMany()
                        .HasForeignKey("SuperTypespkSuperType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.CardTypeData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.CardData", null)
                        .WithMany()
                        .HasForeignKey("CardspkCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGDeckBuilder.EF.TypeData", null)
                        .WithMany()
                        .HasForeignKey("TypespkType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.LegalityData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.CardData", "Card")
                        .WithMany("Legalities")
                        .HasForeignKey("fkCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.PurchaseInformationData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.CardData", "Card")
                        .WithMany("PurchaseInformation")
                        .HasForeignKey("fkCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.CardData", b =>
                {
                    b.Navigation("Legalities");

                    b.Navigation("PurchaseInformation");
                });
#pragma warning restore 612, 618
        }
    }
}
