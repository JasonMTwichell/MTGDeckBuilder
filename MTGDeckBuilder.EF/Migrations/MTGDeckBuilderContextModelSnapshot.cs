// <auto-generated />
using System;
using MTGDeckBuilder.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MTGDeckBuilder.EF.Migrations
{
    [DbContext(typeof(MTGDeckBuilderContext))]
    partial class MTGDeckBuilderContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.8");

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.CardColorData", b =>
                {
                    b.Property<string>("fkCard")
                        .HasColumnType("TEXT");

                    b.Property<string>("fkColor")
                        .HasColumnType("TEXT");

                    b.HasKey("fkCard", "fkColor");

                    b.HasIndex("fkColor");

                    b.ToTable("tblCardColor", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.CardColorIdentityData", b =>
                {
                    b.Property<string>("fkCard")
                        .HasColumnType("TEXT");

                    b.Property<string>("fkColorIdentity")
                        .HasColumnType("TEXT");

                    b.HasKey("fkCard", "fkColorIdentity");

                    b.HasIndex("fkColorIdentity");

                    b.ToTable("tblCardColorIdentity", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.CardData", b =>
                {
                    b.Property<string>("ScryfallOracleID")
                        .HasColumnType("TEXT");

                    b.Property<string>("AsciiName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("HandModifier")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("HasAlternateDeckLimit")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsFunny")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsReserved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Layout")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LifeModifier")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Loyalty")
                        .HasColumnType("TEXT");

                    b.Property<string>("ManaCost")
                        .HasColumnType("TEXT");

                    b.Property<double?>("ManaValue")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Power")
                        .HasColumnType("TEXT");

                    b.Property<string>("Side")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.Property<string>("Toughness")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("ScryfallOracleID");

                    b.HasIndex("ManaValue");

                    b.HasIndex("Name");

                    b.HasIndex("Type");

                    b.ToTable("tblCard", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.CardKeywordData", b =>
                {
                    b.Property<string>("fkCard")
                        .HasColumnType("TEXT");

                    b.Property<string>("fkKeyword")
                        .HasColumnType("TEXT");

                    b.HasKey("fkCard", "fkKeyword");

                    b.HasIndex("fkKeyword");

                    b.ToTable("tblCardKeywordData", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.CardLegalityData", b =>
                {
                    b.Property<string>("fkCard")
                        .HasColumnType("TEXT");

                    b.Property<string>("fkLegality")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsLegal")
                        .HasColumnType("INTEGER");

                    b.HasKey("fkCard", "fkLegality");

                    b.HasIndex("fkLegality");

                    b.ToTable("tblCardLegality", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.CardSubTypeData", b =>
                {
                    b.Property<string>("fkCard")
                        .HasColumnType("TEXT");

                    b.Property<string>("fkSubType")
                        .HasColumnType("TEXT");

                    b.HasKey("fkCard", "fkSubType");

                    b.HasIndex("fkSubType");

                    b.ToTable("tblCardSubType", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.CardSuperTypeData", b =>
                {
                    b.Property<string>("fkCard")
                        .HasColumnType("TEXT");

                    b.Property<string>("fkSuperType")
                        .HasColumnType("TEXT");

                    b.HasKey("fkCard", "fkSuperType");

                    b.HasIndex("fkSuperType");

                    b.ToTable("tblCardSuperType", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.CardTypeData", b =>
                {
                    b.Property<string>("fkCard")
                        .HasColumnType("TEXT");

                    b.Property<string>("fkType")
                        .HasColumnType("TEXT");

                    b.HasKey("fkCard", "fkType");

                    b.HasIndex("fkType");

                    b.ToTable("tblCardType", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.ColorData", b =>
                {
                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.HasKey("Color");

                    b.HasIndex("Color");

                    b.ToTable("tblColor", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.ColorIdentityData", b =>
                {
                    b.Property<string>("ColorIdentity")
                        .HasColumnType("TEXT");

                    b.HasKey("ColorIdentity");

                    b.HasIndex("ColorIdentity");

                    b.ToTable("tblColorIdentity", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.FileVersionData", b =>
                {
                    b.Property<int>("pkVersion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("VersionDate")
                        .HasColumnType("TEXT");

                    b.HasKey("pkVersion");

                    b.ToTable("tblFileVersion", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.KeywordData", b =>
                {
                    b.Property<string>("Keyword")
                        .HasColumnType("TEXT");

                    b.HasKey("Keyword");

                    b.HasIndex("Keyword");

                    b.ToTable("tblKeyword", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.LegalityData", b =>
                {
                    b.Property<string>("Legality")
                        .HasColumnType("TEXT");

                    b.HasKey("Legality");

                    b.ToTable("tblLegality", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.PurchaseInformationData", b =>
                {
                    b.Property<int>("pkPurchaseInformation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CardURI")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StorefrontName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("fkCard")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkPurchaseInformation");

                    b.HasIndex("fkCard");

                    b.ToTable("tblPurchaseInformation", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SubTypeData", b =>
                {
                    b.Property<string>("SubType")
                        .HasColumnType("TEXT");

                    b.HasKey("SubType");

                    b.HasIndex("SubType");

                    b.ToTable("tblSubType", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SuperTypeData", b =>
                {
                    b.Property<string>("SuperType")
                        .HasColumnType("TEXT");

                    b.HasKey("SuperType");

                    b.HasIndex("SuperType");

                    b.ToTable("tblSuperType", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.TypeData", b =>
                {
                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Type");

                    b.HasIndex("Type");

                    b.ToTable("tblType", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.UserDeckCardData", b =>
                {
                    b.Property<int>("fkUserDeck")
                        .HasColumnType("INTEGER");

                    b.Property<string>("fkCard")
                        .HasColumnType("TEXT");

                    b.HasKey("fkUserDeck", "fkCard");

                    b.HasIndex("fkCard");

                    b.ToTable("tblUserDeckCard", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.UserDeckData", b =>
                {
                    b.Property<int>("pkUserDeck")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeckDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DeckName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkUserDeck");

                    b.ToTable("tblUserDeck", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.UserDeckLegalityData", b =>
                {
                    b.Property<string>("LegalitiesLegality")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserDeckspkUserDeck")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeckpkUserDeck")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Legality1")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("fkLegality")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("fkUserDeck")
                        .HasColumnType("INTEGER");

                    b.HasKey("LegalitiesLegality", "UserDeckspkUserDeck");

                    b.HasIndex("DeckpkUserDeck");

                    b.HasIndex("Legality1");

                    b.HasIndex("UserDeckspkUserDeck");

                    b.ToTable("UserDeckLegalityData");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.UserDeckSideboardCardData", b =>
                {
                    b.Property<int>("fkUserDeckSideboard")
                        .HasColumnType("INTEGER");

                    b.Property<string>("fkCard")
                        .HasColumnType("TEXT");

                    b.Property<string>("CardDataScryfallOracleID")
                        .HasColumnType("TEXT");

                    b.HasKey("fkUserDeckSideboard", "fkCard");

                    b.HasIndex("CardDataScryfallOracleID");

                    b.HasIndex("fkCard");

                    b.ToTable("tblUserDeckSideboardCard", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.UserDeckSideboardData", b =>
                {
                    b.Property<int>("fkUserDeck")
                        .HasColumnType("INTEGER");

                    b.HasKey("fkUserDeck");

                    b.ToTable("tblUserDeckSideboard", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.CardColorData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.Entities.CardData", "Card")
                        .WithMany("CardColors")
                        .HasForeignKey("fkCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGDeckBuilder.EF.Entities.ColorData", "Color")
                        .WithMany()
                        .HasForeignKey("fkColor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Color");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.CardColorIdentityData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.Entities.CardData", "Card")
                        .WithMany("CardColorIdentities")
                        .HasForeignKey("fkCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGDeckBuilder.EF.Entities.ColorIdentityData", "ColorIdentity")
                        .WithMany("CardColorIdentities")
                        .HasForeignKey("fkColorIdentity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("ColorIdentity");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.CardKeywordData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.Entities.CardData", "Card")
                        .WithMany("CardKeywords")
                        .HasForeignKey("fkCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGDeckBuilder.EF.Entities.KeywordData", "Keyword")
                        .WithMany("CardKeywords")
                        .HasForeignKey("fkKeyword")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Keyword");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.CardLegalityData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.Entities.CardData", "Card")
                        .WithMany("CardLegalities")
                        .HasForeignKey("fkCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGDeckBuilder.EF.Entities.LegalityData", "Legality")
                        .WithMany("CardLegalities")
                        .HasForeignKey("fkLegality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Legality");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.CardSubTypeData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.Entities.CardData", "Card")
                        .WithMany("CardSubTypes")
                        .HasForeignKey("fkCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGDeckBuilder.EF.Entities.SubTypeData", "SubType")
                        .WithMany("CardSubTypes")
                        .HasForeignKey("fkSubType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("SubType");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.CardSuperTypeData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.Entities.CardData", "Card")
                        .WithMany("CardSuperTypes")
                        .HasForeignKey("fkCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGDeckBuilder.EF.Entities.SuperTypeData", "SuperType")
                        .WithMany("CardSuperTypes")
                        .HasForeignKey("fkSuperType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("SuperType");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.CardTypeData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.Entities.CardData", "Card")
                        .WithMany("CardTypes")
                        .HasForeignKey("fkCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGDeckBuilder.EF.Entities.TypeData", "Type")
                        .WithMany("CardTypes")
                        .HasForeignKey("fkType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.PurchaseInformationData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.Entities.CardData", "Card")
                        .WithMany("PurchaseInformation")
                        .HasForeignKey("fkCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.UserDeckCardData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.Entities.CardData", "Card")
                        .WithMany("UserDeckCardData")
                        .HasForeignKey("fkCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGDeckBuilder.EF.Entities.UserDeckData", "UserDeck")
                        .WithMany()
                        .HasForeignKey("fkUserDeck")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("UserDeck");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.UserDeckLegalityData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.Entities.UserDeckData", "Deck")
                        .WithMany()
                        .HasForeignKey("DeckpkUserDeck")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGDeckBuilder.EF.Entities.LegalityData", null)
                        .WithMany()
                        .HasForeignKey("LegalitiesLegality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGDeckBuilder.EF.Entities.LegalityData", "Legality")
                        .WithMany()
                        .HasForeignKey("Legality1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGDeckBuilder.EF.Entities.UserDeckData", null)
                        .WithMany()
                        .HasForeignKey("UserDeckspkUserDeck")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");

                    b.Navigation("Legality");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.UserDeckSideboardCardData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.Entities.CardData", null)
                        .WithMany("UserDeckSideboardCards")
                        .HasForeignKey("CardDataScryfallOracleID");

                    b.HasOne("MTGDeckBuilder.EF.Entities.CardData", "Card")
                        .WithMany()
                        .HasForeignKey("fkCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGDeckBuilder.EF.Entities.UserDeckSideboardData", "UserDeckSideboard")
                        .WithMany()
                        .HasForeignKey("fkUserDeckSideboard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("UserDeckSideboard");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.UserDeckSideboardData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.Entities.UserDeckData", "UserDeck")
                        .WithOne("SideBoard")
                        .HasForeignKey("MTGDeckBuilder.EF.Entities.UserDeckSideboardData", "fkUserDeck")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserDeck");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.CardData", b =>
                {
                    b.Navigation("CardColorIdentities");

                    b.Navigation("CardColors");

                    b.Navigation("CardKeywords");

                    b.Navigation("CardLegalities");

                    b.Navigation("CardSubTypes");

                    b.Navigation("CardSuperTypes");

                    b.Navigation("CardTypes");

                    b.Navigation("PurchaseInformation");

                    b.Navigation("UserDeckCardData");

                    b.Navigation("UserDeckSideboardCards");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.ColorIdentityData", b =>
                {
                    b.Navigation("CardColorIdentities");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.KeywordData", b =>
                {
                    b.Navigation("CardKeywords");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.LegalityData", b =>
                {
                    b.Navigation("CardLegalities");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SubTypeData", b =>
                {
                    b.Navigation("CardSubTypes");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SuperTypeData", b =>
                {
                    b.Navigation("CardSuperTypes");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.TypeData", b =>
                {
                    b.Navigation("CardTypes");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.UserDeckData", b =>
                {
                    b.Navigation("SideBoard")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
