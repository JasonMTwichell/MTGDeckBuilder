// <auto-generated />
using System;
using MTGDeckBuilder.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MTGDeckBuilder.EF.Migrations
{
    [DbContext(typeof(MTGDeckBuilderContext))]
    partial class MTGDeckBuilderContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.8");

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.AvailabilityData", b =>
                {
                    b.Property<int?>("pkAvailability")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AvailabilityDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkAvailability");

                    b.ToTable("tblAvailability", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.BoosterTypeData", b =>
                {
                    b.Property<int?>("pkBoosterType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BoosterTypeDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkBoosterType");

                    b.ToTable("tblBoosterType", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.BorderColorData", b =>
                {
                    b.Property<int?>("pkBorderColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BorderColorDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkBorderColor");

                    b.ToTable("tblBorderColor", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.ColorData", b =>
                {
                    b.Property<int?>("pkColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkColor");

                    b.ToTable("tblColor", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.ColorIdentityData", b =>
                {
                    b.Property<int?>("pkColorIdentity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorIdentityDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkColorIdentity");

                    b.ToTable("tblColorIdentity", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.ColorIndicatorData", b =>
                {
                    b.Property<int?>("pkColorIndicator")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorIndicatorDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkColorIndicator");

                    b.ToTable("tblColorIndicator", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.DeckTypeData", b =>
                {
                    b.Property<int?>("pkDeckType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeckTypeDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkDeckType");

                    b.ToTable("tblDeckType", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.DuelDeckData", b =>
                {
                    b.Property<int?>("pkDuelDeck")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DuelDeckDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkDuelDeck");

                    b.ToTable("tblDuelDeck", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.FinishData", b =>
                {
                    b.Property<int?>("pkFinish")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FinishDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkFinish");

                    b.ToTable("tblFinish", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.ForeignDataLanguageData", b =>
                {
                    b.Property<int?>("pkForeignDataLanguage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ForeignDataLanguageDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkForeignDataLanguage");

                    b.ToTable("tblForeignDataLanguage", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.FrameEffectData", b =>
                {
                    b.Property<int?>("pkFrameEffect")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FrameEffectDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkFrameEffect");

                    b.ToTable("tblFrameEffect", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.FrameVersionData", b =>
                {
                    b.Property<int?>("pkFrameVersion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FrameVersionDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkFrameVersion");

                    b.ToTable("tblFrameVersion", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.KeywordData", b =>
                {
                    b.Property<int?>("pkKeyword")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("KeywordDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("fkKeywordType")
                        .HasColumnType("INTEGER");

                    b.HasKey("pkKeyword");

                    b.HasIndex("fkKeywordType");

                    b.ToTable("tblKeyword", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.KeywordTypeData", b =>
                {
                    b.Property<int?>("pkKeywordType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("KeywordTypeDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkKeywordType");

                    b.ToTable("tblKeywordType", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.LanguageData", b =>
                {
                    b.Property<int?>("pkLanguage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LanguageDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkLanguage");

                    b.ToTable("tblLanguage", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.LayoutData", b =>
                {
                    b.Property<int?>("pkLayout")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LayoutDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkLayout");

                    b.ToTable("tblLayout", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.PromoTypeData", b =>
                {
                    b.Property<int?>("pkPromoType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PromoTypeDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkPromoType");

                    b.ToTable("tblPromoType", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.RarityData", b =>
                {
                    b.Property<int?>("pkRarity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("RarityDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkRarity");

                    b.ToTable("tblRarity", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SecurityStampData", b =>
                {
                    b.Property<int?>("pkSecurityStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStampDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkSecurityStamp");

                    b.ToTable("tblSecurityStamp", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SetTypeData", b =>
                {
                    b.Property<int?>("pkSetType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SetTypeDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkSetType");

                    b.ToTable("tblSetType", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SideData", b =>
                {
                    b.Property<int?>("pkSide")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SideDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkSide");

                    b.ToTable("tblSide", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SubtypeData", b =>
                {
                    b.Property<int?>("pkSubtype")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SubtypeDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkSubtype");

                    b.ToTable("tblSubtype", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SupertypeData", b =>
                {
                    b.Property<int?>("pkSupertype")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SupertypeDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkSupertype");

                    b.ToTable("tblSupertype", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.TcgPlayerSkuConditionData", b =>
                {
                    b.Property<int?>("pkTcgPlayerSkuCondition")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConditionDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkTcgPlayerSkuCondition");

                    b.ToTable("tblTcgPlayerSkuCondition", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.TcgPlayerSkuFinishData", b =>
                {
                    b.Property<int?>("pkTcgPlayerSkuFinish")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FinishDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkTcgPlayerSkuFinish");

                    b.ToTable("tblTcgPlayerSkuFinish", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.TcgPlayerSkuLanguageData", b =>
                {
                    b.Property<int?>("pkTcgPlayerSkuLanguage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LanguageDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkTcgPlayerSkuLanguage");

                    b.ToTable("tblTcgPlayerSkuLanguage", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.TcgPlayerSkuPrintingData", b =>
                {
                    b.Property<int?>("pkTcgPlayerSkuPrinting")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PrintingDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkTcgPlayerSkuPrinting");

                    b.ToTable("tblTcgPlayerSkuPrinting", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.TypeData", b =>
                {
                    b.Property<int?>("pkType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TypeDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkType");

                    b.ToTable("tblType", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.WatermarkData", b =>
                {
                    b.Property<int?>("pkWatermark")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("WatermarkDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkWatermark");

                    b.ToTable("tblWatermark", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.KeywordData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.Entities.KeywordTypeData", "KeywordType")
                        .WithMany()
                        .HasForeignKey("fkKeywordType");

                    b.Navigation("KeywordType");
                });
#pragma warning restore 612, 618
        }
    }
}
