// <auto-generated />
using System;
using MTGDeckBuilder.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MTGDeckBuilder.EF.Migrations
{
    [DbContext(typeof(MTGDeckBuilderContext))]
    [Migration("20220818025351_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.8");

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.CardColorData", b =>
                {
                    b.Property<int>("fkCard")
                        .HasColumnType("INTEGER");

                    b.Property<int>("fkColor")
                        .HasColumnType("INTEGER");

                    b.HasKey("fkCard", "fkColor");

                    b.HasIndex("fkColor");

                    b.ToTable("tblCardColor", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.CardColorIdentityData", b =>
                {
                    b.Property<int>("fkCard")
                        .HasColumnType("INTEGER");

                    b.Property<int>("fkColorIdentity")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CardColorIdentityDatafkCard")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CardColorIdentityDatafkColorIdentity")
                        .HasColumnType("INTEGER");

                    b.HasKey("fkCard", "fkColorIdentity");

                    b.HasIndex("fkColorIdentity");

                    b.HasIndex("CardColorIdentityDatafkCard", "CardColorIdentityDatafkColorIdentity");

                    b.ToTable("tblCardColorIdentity", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.CardData", b =>
                {
                    b.Property<int>("pkCard")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AsciiName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("HandModifier")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("HasAlternateDeckLimit")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsFunny")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsReserved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Layout")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LifeModifier")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Loyalty")
                        .HasColumnType("TEXT");

                    b.Property<string>("ManaCost")
                        .HasColumnType("TEXT");

                    b.Property<double?>("ManaValue")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Power")
                        .HasColumnType("TEXT");

                    b.Property<string>("Side")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.Property<string>("Toughness")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("pkCard");

                    b.ToTable("tblCard", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.CardKeywordData", b =>
                {
                    b.Property<int>("fkCard")
                        .HasColumnType("INTEGER");

                    b.Property<int>("fkKeyword")
                        .HasColumnType("INTEGER");

                    b.HasKey("fkCard", "fkKeyword");

                    b.HasIndex("fkKeyword");

                    b.ToTable("tblCardKeywordData", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.CardSubTypeData", b =>
                {
                    b.Property<int>("fkCard")
                        .HasColumnType("INTEGER");

                    b.Property<int>("fkSubType")
                        .HasColumnType("INTEGER");

                    b.HasKey("fkCard", "fkSubType");

                    b.HasIndex("fkSubType");

                    b.ToTable("tblCardSubType", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.CardSuperTypeData", b =>
                {
                    b.Property<int>("fkCard")
                        .HasColumnType("INTEGER");

                    b.Property<int>("fkSuperType")
                        .HasColumnType("INTEGER");

                    b.HasKey("fkCard", "fkSuperType");

                    b.HasIndex("fkSuperType");

                    b.ToTable("tblCardSuperType", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.CardTypeData", b =>
                {
                    b.Property<int>("fkCard")
                        .HasColumnType("INTEGER");

                    b.Property<int>("fkType")
                        .HasColumnType("INTEGER");

                    b.HasKey("fkCard", "fkType");

                    b.HasIndex("fkType");

                    b.ToTable("tblCardType", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.ColorData", b =>
                {
                    b.Property<int>("pkColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkColor");

                    b.ToTable("tblColor", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.ColorIdentityData", b =>
                {
                    b.Property<int>("pkColorIdentity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorIdentityName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkColorIdentity");

                    b.ToTable("tblColorIdentity", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.KeywordData", b =>
                {
                    b.Property<int>("pkKeyword")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Keyword")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkKeyword");

                    b.ToTable("tblKeyword", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.LegalityData", b =>
                {
                    b.Property<int>("pkLegality")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("fkCard")
                        .HasColumnType("INTEGER");

                    b.HasKey("pkLegality");

                    b.HasIndex("fkCard");

                    b.ToTable("tblLegality", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.PurchaseInformationData", b =>
                {
                    b.Property<int>("pkPurchaseInformation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CardURI")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StorefrontName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("fkCard")
                        .HasColumnType("INTEGER");

                    b.HasKey("pkPurchaseInformation");

                    b.HasIndex("fkCard");

                    b.ToTable("tblPurchaseInformation", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SubTypeData", b =>
                {
                    b.Property<int>("pkSubType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SubTypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkSubType");

                    b.ToTable("tblSubType", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SuperTypeData", b =>
                {
                    b.Property<int>("pkSuperType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SuperTypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkSuperType");

                    b.ToTable("tblSuperType", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.TypeData", b =>
                {
                    b.Property<int>("pkType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pkType");

                    b.ToTable("tblType", (string)null);
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.CardColorData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.Entities.CardData", "Card")
                        .WithMany("CardColors")
                        .HasForeignKey("fkCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGDeckBuilder.EF.Entities.ColorData", "Color")
                        .WithMany()
                        .HasForeignKey("fkColor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Color");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.CardColorIdentityData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.Entities.CardData", "Card")
                        .WithMany("CardColorIdentities")
                        .HasForeignKey("fkCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGDeckBuilder.EF.Entities.ColorIdentityData", "ColorIdentity")
                        .WithMany("CardColorIdentities")
                        .HasForeignKey("fkColorIdentity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGDeckBuilder.EF.Entities.CardColorIdentityData", null)
                        .WithMany("CardColorIdentities")
                        .HasForeignKey("CardColorIdentityDatafkCard", "CardColorIdentityDatafkColorIdentity");

                    b.Navigation("Card");

                    b.Navigation("ColorIdentity");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.CardKeywordData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.Entities.CardData", "Card")
                        .WithMany("CardKeywords")
                        .HasForeignKey("fkCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGDeckBuilder.EF.Entities.KeywordData", "Keyword")
                        .WithMany("CardKeywords")
                        .HasForeignKey("fkKeyword")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Keyword");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.CardSubTypeData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.Entities.CardData", "Card")
                        .WithMany("CardSubTypes")
                        .HasForeignKey("fkCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGDeckBuilder.EF.Entities.SubTypeData", "SubType")
                        .WithMany("CardSubTypes")
                        .HasForeignKey("fkSubType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("SubType");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.CardSuperTypeData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.Entities.CardData", "Card")
                        .WithMany("CardSuperTypes")
                        .HasForeignKey("fkCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGDeckBuilder.EF.Entities.SuperTypeData", "SuperType")
                        .WithMany("CardSuperTypes")
                        .HasForeignKey("fkSuperType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("SuperType");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.CardTypeData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.Entities.CardData", "Card")
                        .WithMany("CardTypes")
                        .HasForeignKey("fkCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGDeckBuilder.EF.Entities.TypeData", "Type")
                        .WithMany("CardTypes")
                        .HasForeignKey("fkType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.LegalityData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.Entities.CardData", "Card")
                        .WithMany("Legalities")
                        .HasForeignKey("fkCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.PurchaseInformationData", b =>
                {
                    b.HasOne("MTGDeckBuilder.EF.Entities.CardData", "Card")
                        .WithMany("PurchaseInformation")
                        .HasForeignKey("fkCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.CardColorIdentityData", b =>
                {
                    b.Navigation("CardColorIdentities");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.CardData", b =>
                {
                    b.Navigation("CardColorIdentities");

                    b.Navigation("CardColors");

                    b.Navigation("CardKeywords");

                    b.Navigation("CardSubTypes");

                    b.Navigation("CardSuperTypes");

                    b.Navigation("CardTypes");

                    b.Navigation("Legalities");

                    b.Navigation("PurchaseInformation");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.ColorIdentityData", b =>
                {
                    b.Navigation("CardColorIdentities");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.KeywordData", b =>
                {
                    b.Navigation("CardKeywords");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SubTypeData", b =>
                {
                    b.Navigation("CardSubTypes");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.SuperTypeData", b =>
                {
                    b.Navigation("CardSuperTypes");
                });

            modelBuilder.Entity("MTGDeckBuilder.EF.Entities.TypeData", b =>
                {
                    b.Navigation("CardTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
